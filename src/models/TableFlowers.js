/* eslint-disable react/no-unknown-property */
/* eslint-disable react/no-children-prop */
/* eslint-disable react/prop-types */

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { Merged, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import React, {
  createContext,
  useContext,
  useMemo,
  useRef,
  useState
} from "react";
import ObjectTransformControls from "../components/ObjectTransformControls";
import { sceneActions, sceneStateStore } from "../store/sceneData";

const context = createContext();
export function TableFlowersInstances({ children, ...props }) {
  const { nodes } = useGLTF("/table_flowers-transformed.glb");
  const instances = useMemo(
    () => ({
      Flowersmagnoliaflowersmagnolia:
        nodes.flowers_magnolia_003_flowers_magnolia_0,
      Flowersmagnoliaflowersmagnoliabowl:
        nodes.flowers_magnolia_003_flowers_magnolia_bowl_0,
      Flowersmagnoliaflowersmagnoliastem:
        nodes.flowers_magnolia_003_flowers_magnolia_stem_0,
      Flowersmagnoliaflowersmagnoliawater:
        nodes.flowers_magnolia_003_flowers_magnolia_water_0,
    }),
    [nodes]
  );
  return (
    <Merged meshes={instances} {...props}>
      {(instances) => (
        <context.Provider value={instances} children={children} />
      )}
    </Merged>
  );
}

export function TableFlowers(props) {
  const instances = useContext(context);

  // const [active, toggleActive] = useToggle(false);

  const objectRef = useRef();

  const [transformController, setTransformController] = useState(false);

  const [colliderColor, setColliderColor] = useState(false);

  useFrame(() => {
    if (objectRef.current) {
      if (objectRef.current.position.y < 0) {
        setColliderColor(true);
      } else {
        setColliderColor(false);
      }
    }
  });

  return (
    <>
      <group
        {...props}
        dispose={null}
        onClick={() => {
          setTransformController(true);
        }}
        onPointerMissed={() => {
          // e.type === "click" && toggleActive(false);
          sceneActions.removeActiveObject();
          console.log(sceneStateStore);

          setTransformController(false);
        }}
        onDoubleClick={(e) => {
          e.stopPropagation();

          sceneActions.setActiveObject(props.objectId);
          // console.log(e.object.instance.current.material.name)
          sceneActions.setActiveMaterial(
            e.object.instance.current.material.name
          );

          setTransformController(false);
          // toggleActive(true);
        }}
        position={[props.position.x, props.position.y, props.position.z]}
        rotation={[props.rotation.x, props.rotation.y, props.rotation.z]}
        scale={[props.scale.x, props.scale.y, props.scale.z]}
        ref={objectRef}
      >
        <group scale={0.005}>
          <group rotation={[-Math.PI / 2, 0, 0]}>
            <instances.Flowersmagnoliaflowersmagnolia
              color={colliderColor ? "red" : props.nodes.flowers_magnolia}
            />
            <instances.Flowersmagnoliaflowersmagnoliabowl
              color={colliderColor ? "red" : props.nodes.flowers_magnolia_bowl}
            />
            <instances.Flowersmagnoliaflowersmagnoliastem
              color={colliderColor ? "red" : props.nodes.flowers_magnolia_stem}
            />
            <instances.Flowersmagnoliaflowersmagnoliawater
              color={colliderColor ? "red" : props.nodes.flowers_magnolia_water}
            />
          </group>
        </group>
      </group>
      {transformController && (
        <ObjectTransformControls
          id={props.objectId}
          object={objectRef.current}
        />
      )}
    </>
  );
}

// useGLTF.preload("/table_flowers-transformed.glb");
