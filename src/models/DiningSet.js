/* eslint-disable react/no-unknown-property */
/* eslint-disable react/no-children-prop */
/* eslint-disable react/prop-types */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { Merged, useGLTF } from "@react-three/drei";
import React, {
  createContext,
  useContext,
  useEffect,
  useMemo,
  useRef
} from "react";
import { useToggle } from "react-use";
import ObjectTransformControls from "../components/ObjectTransformControls";
import { useSceneObjects } from "../store/useSceneObjects";

const context = createContext();
export function DiningSetInstances({ children, ...props }) {
  const { nodes } = useGLTF("/dining_set-transformed.glb");
  const instances = useMemo(
    () => ({
      Body: nodes.Body1__0,
      BodyPolyurethane: nodes.Body1_Polyurethane_0,
      BodyDMahoganyGlossy: nodes["Body38_3D_Mahogany_-_Glossy_0"],
      BodyMirror: nodes.Body42_Mirror_0,
      BodyGlassMediumColor: nodes["Body45_Glass_-_Medium_Color_0"],
      BodyDMahoganyGlossy1: nodes["Body46_3D_Mahogany_-_Glossy_0"],
      Body1: nodes.Body47__0,
      BodyPolyurethane1: nodes.Body47_Polyurethane_0,
      Body2: nodes.Body48__0,
      BodyPolyurethane2: nodes.Body48_Polyurethane_0,
      Body3: nodes.Body49__0,
      BodyPolyurethane3: nodes.Body49_Polyurethane_0,
      Body4: nodes.Body50__0,
      BodyPolyurethane4: nodes.Body50_Polyurethane_0,
      BodyOpaque: nodes["Body51_Opaque(152,170,175)_0"],
      BodyOpaque1: nodes["Body56_Opaque(152,170,175)_0"],
      BodyOpaque2: nodes["Body57_Opaque(152,170,175)_0"],
      BodyOpaque3: nodes["Body58_Opaque(152,170,175)_0"],
      BodyOpaque4: nodes["Body59_Opaque(152,170,175)_0"],
      BodyGlassLightColor: nodes["Body61_Glass_-_Light_Color_0"],
      BodyGlassLightColor1: nodes["Body62_Glass_-_Light_Color_0"],
      BodyGlassLightColor2: nodes["Body63_Glass_-_Light_Color_0"],
      BodyGlassLightColor3: nodes["Body64_Glass_-_Light_Color_0"],
      BodyGlassLightColor4: nodes["Body65_Glass_-_Light_Color_0"],
    }),
    [nodes]
  );
  return (
    <Merged meshes={instances} {...props}>
      {(instances) => (
        <context.Provider value={instances} children={children} />
      )}
    </Merged>
  );
}

export function DiningSet(props) {
  const instances = useContext(context);

  const [active, toggleActive] = useToggle(false);
  const {
    setActiveChildObject,
    saveObjectScene,
    setActiveObject,
    sceneObjects,
    rmActiveObject,
  } = useSceneObjects();

  const objectRef = useRef();

  useEffect(() => {
    if (objectRef.current) {
      saveObjectScene(props.objectId, objectRef.current);
    }
  }, []);

  return (
    <>
      <group
        {...props}
        dispose={null}
        onClick={(e) => {
          setActiveObject(props.objectId);
          setActiveChildObject(props.objectId, e.object.uuid);
          // setTransformUpdate(true);
          toggleActive(true);
          console.log("still active");
        }}
        onPointerMissed={(e) => {
          e.type === "click" && toggleActive(false);
          rmActiveObject(props.objectId);
          // setTransformUpdate(false);
          console.log(sceneObjects);
        }}
        ref={objectRef}
        scale={[4,4,4]}
      >
        <instances.Body />
        <instances.BodyPolyurethane />
        <instances.BodyDMahoganyGlossy />
        <instances.BodyMirror />
        <instances.BodyGlassMediumColor />
        <instances.BodyDMahoganyGlossy1 />
        <instances.Body1 />
        <instances.BodyPolyurethane1 />
        <instances.Body2 />
        <instances.BodyPolyurethane2 />
        <instances.Body3 />
        <instances.BodyPolyurethane3 />
        <instances.Body4 />
        <instances.BodyPolyurethane4 />
        <instances.BodyOpaque />
        <instances.BodyOpaque1 />
        <instances.BodyOpaque2 />
        <instances.BodyOpaque3 />
        <instances.BodyOpaque4 />
        <instances.BodyGlassLightColor />
        <instances.BodyGlassLightColor1 />
        <instances.BodyGlassLightColor2 />
        <instances.BodyGlassLightColor3 />
        <instances.BodyGlassLightColor4 />
      </group>
      {active && (
        <ObjectTransformControls
          id={props.objectId}
          object={objectRef.current}
          position={props.position}
          rotation={props.rotation}
          scale={props.scale}
        />
      )}
    </>
  );
}

useGLTF.preload("/dining_set-transformed.glb");
